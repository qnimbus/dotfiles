#!/bin/bash

# Script: run_onchange_after_10-configure-vscode.sh
# Description: Installs Visual Studio Code extensions
# Author: {{ .chezmoi.username }}
# Machine: {{ .chezmoi.hostname }}
# OS: {{ .chezmoi.os }}/{{ .chezmoi.arch }}
# Version: 1.0

{{ if and (eq .osid "linux-ubuntu") (not .ephemeral) (not .headless) -}}

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Default values
VERBOSE=false

# VS Code Extensions to install
EXTENSIONS=(
    "EditorConfig.EditorConfig"
    "github.copilot"
    "github.copilot-chat"
    "esbenp.prettier-vscode"
    "ms-vscode.vscode-typescript-next"
    "ms-vscode-remote.vscode-remote-extensionpack"
)

# Function to display usage
usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Description:
    Installs a predefined list of Visual Studio Code extensions using the 'code' command line tool.
    The script includes error handling and logging for each extension installation.
    Extensions are installed with --force flag to ensure they are updated to the latest version.

Options:
    -v, --verbose       Enable verbose output
    -h, --help          Display this help message

Examples:
    $0
    $0 -v

Notes:
    Requires: Visual Studio Code CLI (code command) must be available in PATH
EOF
}

# Logging function
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")

    case "$level" in
        INFO)
            echo "[$timestamp] [INFO] $message"
            ;;
        WARN)
            echo "[$timestamp] [WARN] $message" >&2
            ;;
        ERROR)
            echo "[$timestamp] [ERROR] $message" >&2
            ;;
        SUCCESS)
            echo "[$timestamp] [SUCCESS] $message"
            ;;
        DEBUG)
            if [[ "$VERBOSE" == "true" ]]; then
                echo "[$timestamp] [DEBUG] $message"
            fi
            ;;
    esac
}

# Function to check prerequisites
check_prerequisites() {
    log INFO "Checking prerequisites..."

    # Check if VS Code CLI is available
    if ! command -v "code" &> /dev/null; then
        log ERROR "Visual Studio Code CLI not found in PATH. Please ensure VS Code is installed and 'code' command is available."
        exit 1
    fi

    log SUCCESS "Visual Studio Code CLI found."
    log SUCCESS "Prerequisites check completed"
}

# Function to install VS Code extension
install_vscode_extension() {
    local extension_id="$1"

    log INFO "Installing extension: $extension_id"

    local args=("--install-extension" "$extension_id" "--force")

    # Temporarily disable exit on error for this command
    set +e
    local output=$(code "${args[@]}" 2>&1)
    local exit_code=$?
    set -e

    if [[ $exit_code -eq 0 ]]; then
        log SUCCESS "Successfully installed extension: $extension_id"
        return 0
    else
        log WARN "Failed to install extension: $extension_id. Output: $output"
        return 1
    fi
}

# Main function
main() {
    local script_name=$(basename "$0")

    log INFO "========================================"
    log INFO "STARTING: $script_name"
    log INFO "========================================"

    log INFO "Starting VS Code extension installation..."

    # Check prerequisites
    check_prerequisites

    # Install extensions
    log INFO "Installing ${#EXTENSIONS[@]} VS Code extensions..."

    local success_count=0
    local failure_count=0

    for extension in "${EXTENSIONS[@]}"; do
        if install_vscode_extension "$extension"; then
            success_count=$((success_count + 1))
        else
            failure_count=$((failure_count + 1))
        fi
    done

    log SUCCESS "Extension installation completed. Success: $success_count, Failures: $failure_count"

    if [[ $failure_count -gt 0 ]]; then
        log WARN "$failure_count extensions failed to install. Check the logs above for details."
    fi

    log SUCCESS "========================================"
    log SUCCESS "COMPLETED: $script_name"
    log SUCCESS "========================================"
}

# Cleanup function
cleanup() {
    local script_name=$(basename "$0")
    log INFO "Cleanup completed"
    log INFO "========================================"
    log INFO "EXITING: $script_name"
    log INFO "========================================"
    exit 0  # Ensure we always exit with success
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            log ERROR "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Set up trap for cleanup on exit
trap cleanup EXIT

# Execute main function
main "$@"

{{- end }}
